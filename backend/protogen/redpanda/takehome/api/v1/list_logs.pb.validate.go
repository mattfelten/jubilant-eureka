// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: redpanda/takehome/api/v1/list_logs.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogsRequestMultiError, or nil if none found.
func (m *ListLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartitionId

	// no validation rules for Offset

	// no validation rules for StartTimestamp

	// no validation rules for MaxResults

	// no validation rules for MaxMessageSize

	// no validation rules for Service

	// no validation rules for Follow

	if len(errors) > 0 {
		return ListLogsRequestMultiError(errors)
	}

	return nil
}

// ListLogsRequestMultiError is an error wrapping multiple validation errors
// returned by ListLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsRequestMultiError) AllErrors() []error { return m }

// ListLogsRequestValidationError is the validation error returned by
// ListLogsRequest.Validate if the designated constraints aren't met.
type ListLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsRequestValidationError) ErrorName() string { return "ListLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsRequestValidationError{}

// Validate checks the field values on ListLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogsResponseMultiError, or nil if none found.
func (m *ListLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.ControlMessage.(type) {
	case *ListLogsResponse_Data:
		if v == nil {
			err := ListLogsResponseValidationError{
				field:  "ControlMessage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogsResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogsResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLogsResponse_Phase:
		if v == nil {
			err := ListLogsResponseValidationError{
				field:  "ControlMessage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogsResponseValidationError{
						field:  "Phase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogsResponseValidationError{
						field:  "Phase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogsResponseValidationError{
					field:  "Phase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLogsResponse_Error:
		if v == nil {
			err := ListLogsResponseValidationError{
				field:  "ControlMessage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Error
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListLogsResponseMultiError(errors)
	}

	return nil
}

// ListLogsResponseMultiError is an error wrapping multiple validation errors
// returned by ListLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsResponseMultiError) AllErrors() []error { return m }

// ListLogsResponseValidationError is the validation error returned by
// ListLogsResponse.Validate if the designated constraints aren't met.
type ListLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsResponseValidationError) ErrorName() string { return "ListLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsResponseValidationError{}

// Validate checks the field values on ListLogsResponse_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogsResponse_Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsResponse_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogsResponse_LogMultiError, or nil if none found.
func (m *ListLogsResponse_Log) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsResponse_Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartitionId

	// no validation rules for Offset

	// no validation rules for Timestamp

	// no validation rules for Log

	// no validation rules for TooLarge

	if len(errors) > 0 {
		return ListLogsResponse_LogMultiError(errors)
	}

	return nil
}

// ListLogsResponse_LogMultiError is an error wrapping multiple validation
// errors returned by ListLogsResponse_Log.ValidateAll() if the designated
// constraints aren't met.
type ListLogsResponse_LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsResponse_LogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsResponse_LogMultiError) AllErrors() []error { return m }

// ListLogsResponse_LogValidationError is the validation error returned by
// ListLogsResponse_Log.Validate if the designated constraints aren't met.
type ListLogsResponse_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsResponse_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsResponse_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsResponse_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsResponse_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsResponse_LogValidationError) ErrorName() string {
	return "ListLogsResponse_LogValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogsResponse_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsResponse_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsResponse_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsResponse_LogValidationError{}

// Validate checks the field values on ListLogsResponse_CompletionSummary with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListLogsResponse_CompletionSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsResponse_CompletionSummary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListLogsResponse_CompletionSummaryMultiError, or nil if none found.
func (m *ListLogsResponse_CompletionSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsResponse_CompletionSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ElapsedMs

	// no validation rules for IsCancelled

	// no validation rules for BytesConsumed

	if len(errors) > 0 {
		return ListLogsResponse_CompletionSummaryMultiError(errors)
	}

	return nil
}

// ListLogsResponse_CompletionSummaryMultiError is an error wrapping multiple
// validation errors returned by
// ListLogsResponse_CompletionSummary.ValidateAll() if the designated
// constraints aren't met.
type ListLogsResponse_CompletionSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsResponse_CompletionSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsResponse_CompletionSummaryMultiError) AllErrors() []error { return m }

// ListLogsResponse_CompletionSummaryValidationError is the validation error
// returned by ListLogsResponse_CompletionSummary.Validate if the designated
// constraints aren't met.
type ListLogsResponse_CompletionSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsResponse_CompletionSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsResponse_CompletionSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsResponse_CompletionSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsResponse_CompletionSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsResponse_CompletionSummaryValidationError) ErrorName() string {
	return "ListLogsResponse_CompletionSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogsResponse_CompletionSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsResponse_CompletionSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsResponse_CompletionSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsResponse_CompletionSummaryValidationError{}
