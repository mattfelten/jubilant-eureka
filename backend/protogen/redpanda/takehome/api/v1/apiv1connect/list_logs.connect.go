// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/takehome/api/v1/list_logs.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/redpanda-data/takehome-ux-team/backend/protogen/redpanda/takehome/api/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogServiceName is the fully-qualified name of the LogService service.
	LogServiceName = "redpanda.takehome.api.v1.LogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogServiceListLogsProcedure is the fully-qualified name of the LogService's ListLogs RPC.
	LogServiceListLogsProcedure = "/redpanda.takehome.api.v1.LogService/ListLogs"
)

// LogServiceClient is a client for the redpanda.takehome.api.v1.LogService service.
type LogServiceClient interface {
	ListLogs(context.Context, *connect.Request[v1.ListLogsRequest]) (*connect.ServerStreamForClient[v1.ListLogsResponse], error)
}

// NewLogServiceClient constructs a client for the redpanda.takehome.api.v1.LogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	logServiceMethods := v1.File_redpanda_takehome_api_v1_list_logs_proto.Services().ByName("LogService").Methods()
	return &logServiceClient{
		listLogs: connect.NewClient[v1.ListLogsRequest, v1.ListLogsResponse](
			httpClient,
			baseURL+LogServiceListLogsProcedure,
			connect.WithSchema(logServiceMethods.ByName("ListLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// logServiceClient implements LogServiceClient.
type logServiceClient struct {
	listLogs *connect.Client[v1.ListLogsRequest, v1.ListLogsResponse]
}

// ListLogs calls redpanda.takehome.api.v1.LogService.ListLogs.
func (c *logServiceClient) ListLogs(ctx context.Context, req *connect.Request[v1.ListLogsRequest]) (*connect.ServerStreamForClient[v1.ListLogsResponse], error) {
	return c.listLogs.CallServerStream(ctx, req)
}

// LogServiceHandler is an implementation of the redpanda.takehome.api.v1.LogService service.
type LogServiceHandler interface {
	ListLogs(context.Context, *connect.Request[v1.ListLogsRequest], *connect.ServerStream[v1.ListLogsResponse]) error
}

// NewLogServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogServiceHandler(svc LogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logServiceMethods := v1.File_redpanda_takehome_api_v1_list_logs_proto.Services().ByName("LogService").Methods()
	logServiceListLogsHandler := connect.NewServerStreamHandler(
		LogServiceListLogsProcedure,
		svc.ListLogs,
		connect.WithSchema(logServiceMethods.ByName("ListLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.takehome.api.v1.LogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogServiceListLogsProcedure:
			logServiceListLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLogServiceHandler struct{}

func (UnimplementedLogServiceHandler) ListLogs(context.Context, *connect.Request[v1.ListLogsRequest], *connect.ServerStream[v1.ListLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.takehome.api.v1.LogService.ListLogs is not implemented"))
}
